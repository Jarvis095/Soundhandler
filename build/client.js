"use strict";(()=>{var y=Object.defineProperty;var F=(d,e,t)=>e in d?y(d,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):d[e]=t;var r=(d,e)=>y(d,"name",{value:e,configurable:!0});var u=(d,e,t)=>F(d,typeof e!="symbol"?e+"":e,t);var c={READY:"sounity:ready",GET_DEFAULTS:"sounity:get-defaults",SOUND_ENDED:"soundEnded"};RegisterNuiCallbackType(c.READY);on(`__cfx_nui:${c.READY}`,()=>{emit("Sounity:Ready"),emit("Sounity:CreateSoundFilter","underwater","biquad",JSON.stringify({Q:1,frequency:100,type:"lowpass"}))});RegisterNuiCallbackType(c.GET_DEFAULTS);on(`__cfx_nui:${c.GET_DEFAULTS}`,(d,e)=>{e(JSON.stringify({volume:o.volume,outputType:o.outputType,loop:o.loop,posX:o.posX,posY:o.posY,posZ:o.posZ,rotX:o.rotX,rotY:o.rotY,rotZ:o.rotZ,panningModel:o.panningModel,distanceModel:o.distanceModel,maxDistance:o.maxDistance,refDistance:o.refDistance,rolloffFactor:o.rolloffFactor,coneInnerAngle:o.coneInnerAngle,coneOuterAngle:o.coneOuterAngle,coneOuterGain:o.coneOuterGain}))});RegisterNuiCallbackType(c.SOUND_ENDED);on(`__cfx_nui:${c.SOUND_ENDED}`,d=>{emit("Sounity:DisposeSound",d.identifier),emit("Sounity:DeleteOnComplete",d.identifier)});function C(d,e,t){return[d,e,t]}r(C,"Vector3");var v=class v{constructor(){u(this,"serverTime",GetGameTimer());u(this,"underwater",!1);u(this,"identifierPrefix");u(this,"sounds",{});u(this,"identifier","");u(this,"options",{});this.identifierPrefix="client"}setServerTime(e){this.serverTime=e}Tick(){let e=GetGameplayCamCoords(),t=GetFinalRenderedCamRot(0);SendNuiMessage(JSON.stringify({type:"update",posX:e[0],posY:e[1],posZ:e[2],rotX:t[0],rotY:t[1],rotZ:t[2],musicVolume:0,sfxVolume:10})),Object.values(this.sounds).forEach(i=>{if(!i.isAttached())return;let n=i.GetAttachTo();if(!NetworkDoesEntityExistWithNetworkId(n)){i.Detach();return}let s=NetworkGetEntityFromNetworkId(n),h=GetEntityCoords(s,!1),l=GetEntityRotation(s,2);i.Move(h[0],h[1],h[2]),i.Rotate(l[0],l[1],l[2])})}CreateFilter(e,t,i){SendNuiMessage(JSON.stringify({type:"createFilter",filterName:e,filterType:t,options:JSON.parse(i)}))}AddListenerFilter(e){SendNuiMessage(JSON.stringify({type:"addListenerFilter",filterName:e}))}RemoveListenerFilter(e){SendNuiMessage(JSON.stringify({type:"removeListenerFilter",filterName:e}))}getSoundInstance(e){if(!this.sounds[e])throw new Error(`Unknown identifier '${e}'`);return this.sounds[e]}CreateSound(e,t="{}",i){let n=JSON.parse(t),s="",h={Start2:r((a,p,m,A,N)=>this.Start2(a,p,m,A,N),"Start2"),Move:r((a,p,m)=>this.Move(a,p,m),"Move"),Rotate:r((a,p,m)=>this.Rotate(a,p,m),"Rotate"),Attach:r(a=>this.Attach(a),"Attach"),Detach:r(()=>this.Detach(),"Detach"),Stop:r(a=>this.Stop(a),"Stop"),Dispose:r(a=>this.Dispose(a),"Dispose"),isAttached:r(()=>this.isAttached(),"isAttached"),GetAttachTo:r(()=>this.GetAttachTo(),"GetAttachTo"),getPosition:r(()=>this.getPosition(),"getPosition"),AddFilter:r(a=>this.AddFilter(a),"AddFilter"),RemoveFilter:r(a=>this.RemoveFilter(a),"RemoveFilter")};i?s=i:s=`${this.identifierPrefix}${v.idCounter++}`,this.identifier=s,this.options=n;let l=this.getPosition(),f=0;return GetWaterHeightNoWaves(l.x,l.y,l.z,f),SendNuiMessage(JSON.stringify({type:"createSound",identifier:s,source:e,options:n})),l.z<f&&(this.AddFilter("underwater"),this.underwater=!0),this.sounds[s]=h,s}StartSound(e,t,i,n,s){let h=Math.max(0,this.serverTime-t);this.getSoundInstance(e).Start2(e,h,i,n,s)}MoveSound(e,t,i,n){this.getSoundInstance(e).Move(t,i,n)}RotateSound(e,t,i,n){this.getSoundInstance(e).Rotate(t,i,n)}StopSound(e){this.sounds[e]&&this.getSoundInstance(e).Stop(e)}DisposeSound(e){this.sounds[e]&&this.getSoundInstance(e).Dispose(e)}AttachSound(e,t){this.getSoundInstance(e).Attach(t)}DetachSound(e){this.getSoundInstance(e).Detach()}AddSoundFilter(e,t){this.getSoundInstance(e).AddFilter(t)}RemoveSoundFilter(e,t){this.getSoundInstance(e).RemoveFilter(t)}Start2(e,t,i,n,s){SendNuiMessage(JSON.stringify({type:"startSound",identifier:e,startTime:t,refDistance:i,volume:n,loop:s}))}Move2(e){this.Move(e[0],e[1],e[2])}Move(e,t,i){this.options.posX=e,this.options.posY=t,this.options.posZ=i;let n=0;GetWaterHeightNoWaves(e,t,i,n),SendNuiMessage(JSON.stringify({type:"moveSound",identifier:this.identifier,posX:e,posY:t,posZ:i})),i<n&&!this.underwater?(this.AddFilter("underwater"),this.underwater=!0):i>=n&&this.underwater&&(this.RemoveFilter("underwater"),this.underwater=!1)}Rotate(e,t,i){this.options.rotX=e,this.options.rotY=t,this.options.rotZ=i,SendNuiMessage(JSON.stringify({type:"rotateSound",identifier:this.identifier,rotX:e,rotY:t,rotZ:i}))}Attach(e){this.options.attachTo=e}Detach(){delete this.options.attachTo}Stop(e){SendNuiMessage(JSON.stringify({type:"stopSound",identifier:e}))}Dispose(e){SendNuiMessage(JSON.stringify({type:"disposeSound",identifier:e})),delete this.sounds[e]}DeleteOnComplete(e){this.sounds[e]&&delete this.sounds[e]}isAttached(){return this.options.hasOwnProperty("attachTo")}GetAttachTo(){return this.isAttached()?this.options.attachTo:0}getPosition(){let e=this.GetAttachTo();if(e!==0)return GetEntityCoords(NetworkGetEntityFromNetworkId(e),!1);let t=this.options.posX||0,i=this.options.posY||0,n=this.options.posZ||0;return C(t,i,n)}AddFilter(e){SendNuiMessage(JSON.stringify({type:"addSoundFilter",identifier:this.identifier,filterName:e}))}RemoveFilter(e){SendNuiMessage(JSON.stringify({type:"removeSoundFilter",identifier:this.identifier,filterName:e}))}};r(v,"SounityClientAPI"),u(v,"idCounter",1);var g=v;var D="Sounity",I=[{name:"ServerTime",handler:"onServerTime"},{name:"CreateSound",handler:"onCreateSound"},{name:"StartSound",handler:"onPlaySound"},{name:"StopSound",handler:"onStopSound"},{name:"CreateSoundFilter",handler:"onCreateSoundFilter"},{name:"MoveSound",handler:"onMoveSound"},{name:"RotateSound",handler:"onRotateSound"},{name:"AttachSound",handler:"onAttachSound"},{name:"DetachSound",handler:"onDetachSound"},{name:"DisposeSound",handler:"onDisposeSound"},{name:"AddFilter",handler:"onAddFilter"},{name:"AddFilters",handler:"onAddFilters"},{name:"RemoveFilter",handler:"onRemoveFilter"},{name:"AddListenerFilter",handler:"onAddListenerFilter"},{name:"RemoveListenerFilter",handler:"onRemoveListenerFilter"},{name:"DeleteOnComplete",handler:"onDeleteOnComplete"},{name:"ChangeVolume",handler:"onChangeVolume"},{name:"ChangeMaxDistance",handler:"onChangeMaxDistance"},{name:"ChangeRefDistance",handler:"onChangeRefDistance"},{name:"ChangeLoop",handler:"onChangeLoop"}],b=class b{constructor(){u(this,"sounityClientAPI");u(this,"tickInterval",null);u(this,"activeSounds",new Set);I.forEach(e=>{onNet(`${D}:${e.name}`,(...t)=>this[e.handler](...t))}),this.sounityClientAPI=new g}startTick(){this.tickInterval===null&&(this.tickInterval=setTick(()=>this.BrowserUpdaterTick()))}stopTick(){this.tickInterval!==null&&(clearTick(this.tickInterval),this.tickInterval=null)}onCreateSound(e,t,i){this.sounityClientAPI.CreateSound(t,i,e)}onPlaySound(e,t,i,n,s){this.activeSounds.add(e),this.startTick(),this.sounityClientAPI.StartSound(e,t,i,n,s)}onStopSound(e){this.activeSounds.delete(e),this.activeSounds.size===0&&this.stopTick(),this.sounityClientAPI.StopSound(e)}onChangeVolume(e,t){SendNuiMessage(JSON.stringify({type:"setSoundVolume",identifier:e,volume:t}))}onChangeRefDistance(e,t){SendNuiMessage(JSON.stringify({type:"setSoundRefDistance",identifier:e,refDistance:t}))}onChangeLoop(e,t){SendNuiMessage(JSON.stringify({type:"setLoop",identifier:e,loop:t}))}onCreateSoundFilter(e,t,i){this.sounityClientAPI.CreateFilter(e,t,i)}onMoveSound(e,t,i,n){this.sounityClientAPI.MoveSound(e,t,i,n)}onRotateSound(e,t,i,n){this.sounityClientAPI.RotateSound(e,t,i,n)}onAttachSound(e,t){this.sounityClientAPI.AttachSound(e,t)}onDetachSound(e){this.sounityClientAPI.DetachSound(e)}onDeleteOnComplete(e){this.sounityClientAPI.DeleteOnComplete(e)}onDisposeSound(e){this.activeSounds.delete(e),this.activeSounds.size===0&&this.stopTick(),this.sounityClientAPI.DisposeSound(e)}onServerTime(e){this.sounityClientAPI.setServerTime(e)}onAddFilter(e,t){this.sounityClientAPI.AddSoundFilter(e,t)}onAddFilters(e,t){JSON.parse(t).forEach(n=>this.onAddFilter(e,n))}onRemoveFilter(e,t){this.sounityClientAPI.RemoveSoundFilter(e,t)}onAddListenerFilter(e){this.sounityClientAPI.AddListenerFilter(e)}onRemoveListenerFilter(e){this.sounityClientAPI.RemoveListenerFilter(e)}async BrowserUpdaterTick(){this.sounityClientAPI.Tick()}};r(b,"SounityClient");var S=b;var o=JSON.parse(LoadResourceFile(GetCurrentResourceName(),"config.json"));setImmediate(()=>{new S});})();
//# sourceMappingURL=data:application/json;base64,
