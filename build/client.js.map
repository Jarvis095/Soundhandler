{
  "version": 3,
  "sources": ["../resources/game/client/cl_nuicallbacks.ts", "../resources/game/client/classes/SounityClientAPI.ts", "../resources/game/client/classes/SounityClient.ts", "../resources/game/client/cl_main.ts"],
  "sourcesContent": ["import { Config } from \"./cl_main\";\r\n\r\nconst NUI_CALLBACK_TYPES = {\r\n    READY: \"sounity:ready\",\r\n    GET_DEFAULTS: \"sounity:get-defaults\",\r\n    SOUND_ENDED: \"soundEnded\",\r\n};\r\n\r\nRegisterNuiCallbackType(NUI_CALLBACK_TYPES.READY);\r\non(`__cfx_nui:${NUI_CALLBACK_TYPES.READY}`, () => {\r\n    emit('Sounity:Ready');\r\n    emit('Sounity:CreateSoundFilter', \"underwater\", \"biquad\", JSON.stringify({\r\n        Q: 1,\r\n        frequency: 100,\r\n        type: \"lowpass\"\r\n    }));\r\n});\r\n\r\nRegisterNuiCallbackType(NUI_CALLBACK_TYPES.GET_DEFAULTS);\r\non(`__cfx_nui:${NUI_CALLBACK_TYPES.GET_DEFAULTS}`, (data: any, cb: Function) => {\r\n    cb(JSON.stringify({\r\n        volume: Config.volume,\r\n        outputType: Config.outputType,\r\n        loop: Config.loop,\r\n        posX: Config.posX,\r\n        posY: Config.posY,\r\n        posZ: Config.posZ,\r\n        rotX: Config.rotX,\r\n        rotY: Config.rotY,\r\n        rotZ: Config.rotZ,\r\n        panningModel: Config.panningModel,\r\n        distanceModel: Config.distanceModel,\r\n        maxDistance: Config.maxDistance,\r\n        refDistance: Config.refDistance,\r\n        rolloffFactor: Config.rolloffFactor,\r\n        coneInnerAngle: Config.coneInnerAngle,\r\n        coneOuterAngle: Config.coneOuterAngle,\r\n        coneOuterGain: Config.coneOuterGain,\r\n    }));\r\n});\r\n\r\nRegisterNuiCallbackType(NUI_CALLBACK_TYPES.SOUND_ENDED);\r\non(`__cfx_nui:${NUI_CALLBACK_TYPES.SOUND_ENDED}`, (data: any) => {\r\n    emit('Sounity:DisposeSound', data.identifier);\r\n    emit('Sounity:DeleteOnComplete', data.identifier);\r\n});", "function Vector3(x: number, y: number, z: number) {\r\n    return [x, y, z];\r\n}\r\n\r\nexport class SounityClientAPI {\r\n    private serverTime: number = GetGameTimer();\r\n    private underwater: boolean = false;\r\n    protected static idCounter: number = 1;\r\n    protected identifierPrefix: string;\r\n    protected sounds: {\r\n        [key: string]: {\r\n            Start2: (identifier: string, ss: number, refDistance: number, volume: number, loop: boolean) => void,\r\n            Move: (posX: number, posY: number, posZ: number) => void,\r\n            Rotate: (rotX: number, rotY: number, rotZ: number) => void,\r\n            Attach: (netId: number) => void,\r\n            Detach: () => void,\r\n            Stop: (identifier: string) => void,\r\n            Dispose: (identifier: string) => void,\r\n            isAttached: () => boolean,\r\n            GetAttachTo: () => number,\r\n            getPosition: () => any,\r\n            AddFilter: (filterName: string) => void,\r\n            RemoveFilter: (filterName: string) => void,\r\n        }\r\n    } = {};\r\n\r\n\r\n    private identifier: string = \"\";\r\n    private options: { [key: string]: any } = {};\r\n\r\n    constructor() {\r\n        this.identifierPrefix = \"client\";\r\n    }\r\n\r\n    public setServerTime(serverTime: number): void {\r\n        this.serverTime = serverTime;\r\n    }\r\n\r\n    public Tick(): void {\r\n        const Position = GetGameplayCamCoords();\r\n        const Rotation = GetFinalRenderedCamRot(0);\r\n\r\n        SendNuiMessage(JSON.stringify({\r\n            type: \"update\",\r\n            posX: Position[0],\r\n            posY: Position[1],\r\n            posZ: Position[2],\r\n            rotX: Rotation[0],\r\n            rotY: Rotation[1],\r\n            rotZ: Rotation[2],\r\n            musicVolume: 0,\r\n            sfxVolume: 10,\r\n        }));\r\n\r\n        Object.values(this.sounds).forEach(sound => {\r\n            if (!sound.isAttached()) return;\r\n\r\n            const netId = sound.GetAttachTo();\r\n            if (!NetworkDoesEntityExistWithNetworkId(netId)) {\r\n                sound.Detach();\r\n                return;\r\n            }\r\n\r\n            const entId = NetworkGetEntityFromNetworkId(netId);\r\n            const position = GetEntityCoords(entId, false);\r\n            const rotation = GetEntityRotation(entId, 2);\r\n\r\n            sound.Move(position[0], position[1], position[2]);\r\n            sound.Rotate(rotation[0], rotation[1], rotation[2]);\r\n        });\r\n    }\r\n\r\n    public CreateFilter(filterName: string, filterType: string, options_json: string): void {\r\n        SendNuiMessage(JSON.stringify({\r\n            type: \"createFilter\",\r\n            filterName,\r\n            filterType,\r\n            options: JSON.parse(options_json)\r\n        }));\r\n    }\r\n\r\n    public AddListenerFilter(filterName: string): void {\r\n        SendNuiMessage(JSON.stringify({\r\n            type: \"addListenerFilter\",\r\n            filterName,\r\n        }));\r\n    }\r\n\r\n    public RemoveListenerFilter(filterName: string): void {\r\n        SendNuiMessage(JSON.stringify({\r\n            type: \"removeListenerFilter\",\r\n            filterName,\r\n        }));\r\n    }\r\n\r\n    protected getSoundInstance(identifier: string): {\r\n        Start2: (identifier: string, ss: number, refDistance: number, volume: number, loop: boolean) => void,\r\n        Move: (posX: number, posY: number, posZ: number) => void,\r\n        Rotate: (rotX: number, rotY: number, rotZ: number) => void,\r\n        Attach: (netId: number) => void,\r\n        Detach: () => void,\r\n        Stop: (identifier: string) => void,\r\n        Dispose: (identifier: string) => void,\r\n        isAttached: () => boolean,\r\n        GetAttachTo: () => number,\r\n        getPosition: () => any,\r\n        AddFilter: (filterName: string) => void,\r\n        RemoveFilter: (filterName: string) => void,\r\n    } {\r\n        if (!this.sounds[identifier]) {\r\n            throw new Error(`Unknown identifier '${identifier}'`);\r\n        }\r\n\r\n        return this.sounds[identifier];\r\n    }\r\n\r\n    public CreateSound(source: string, options_json: string = \"{}\", identifierX?: string): string {\r\n        const options = JSON.parse(options_json);\r\n        let identifier: string = \"\";\r\n        const soundInstance = {\r\n            Start2: (identifier: string, ss: number, refDistance: number, volume: number, loop: boolean) => this.Start2(identifier, ss, refDistance, volume, loop),\r\n            Move: (posX: number, posY: number, posZ: number) => this.Move(posX, posY, posZ),\r\n            Rotate: (rotX: number, rotY: number, rotZ: number) => this.Rotate(rotX, rotY, rotZ),\r\n            Attach: (netId: number) => this.Attach(netId),\r\n            Detach: () => this.Detach(),\r\n            Stop: (identifier: string) => this.Stop(identifier),\r\n            Dispose: (identifier: string) => this.Dispose(identifier),\r\n            isAttached: () => this.isAttached(),\r\n            GetAttachTo: () => this.GetAttachTo(),\r\n            getPosition: () => this.getPosition(),\r\n            AddFilter: (filterName: string) => this.AddFilter(filterName),\r\n            RemoveFilter: (filterName: string) => this.RemoveFilter(filterName),\r\n        };\r\n\r\n        if (!identifierX) {\r\n            identifier = `${this.identifierPrefix}${SounityClientAPI.idCounter++}`\r\n        } else {\r\n            identifier = identifierX;\r\n        };\r\n\r\n        this.identifier = identifier;\r\n        this.options = options;\r\n\r\n        const initialPosition = this.getPosition();\r\n        let waterHeight = 0;\r\n        GetWaterHeightNoWaves(initialPosition.x, initialPosition.y, initialPosition.z, waterHeight);\r\n\r\n        SendNuiMessage(JSON.stringify({\r\n            type: \"createSound\",\r\n            identifier,\r\n            source,\r\n            options,\r\n        }));\r\n\r\n        if (initialPosition.z < waterHeight) {\r\n            this.AddFilter(\"underwater\");\r\n            this.underwater = true;\r\n        }\r\n\r\n        this.sounds[identifier] = soundInstance;\r\n\r\n        return identifier;\r\n    }\r\n\r\n    public StartSound(identifier: string, ss: number, refDistance: number, volume: number, loop: boolean): void {\r\n        const startTime = Math.max(0, this.serverTime - ss);\r\n        this.getSoundInstance(identifier).Start2(identifier, startTime, refDistance, volume, loop);\r\n    }\r\n\r\n    public MoveSound(identifier: string, posX: number, posY: number, posZ: number): void {\r\n        this.getSoundInstance(identifier).Move(posX, posY, posZ);\r\n    }\r\n\r\n    public RotateSound(identifier: string, rotX: number, rotY: number, rotZ: number): void {\r\n        this.getSoundInstance(identifier).Rotate(rotX, rotY, rotZ);\r\n    }\r\n\r\n    public StopSound(identifier: string): void {\r\n        if (this.sounds[identifier]) {\r\n            this.getSoundInstance(identifier).Stop(identifier);\r\n        }\r\n    }\r\n\r\n    public DisposeSound(identifier: string): void {\r\n        if (this.sounds[identifier]) {\r\n            this.getSoundInstance(identifier).Dispose(identifier);\r\n        }\r\n    }\r\n\r\n    public AttachSound(identifier: string, entityId: number): void {\r\n        this.getSoundInstance(identifier).Attach(entityId);\r\n    }\r\n\r\n    public DetachSound(identifier: string): void {\r\n        this.getSoundInstance(identifier).Detach();\r\n    }\r\n\r\n    public AddSoundFilter(identifier: string, filterName: string): void {\r\n        this.getSoundInstance(identifier).AddFilter(filterName);\r\n    }\r\n\r\n    public RemoveSoundFilter(identifier: string, filterName: string): void {\r\n        this.getSoundInstance(identifier).RemoveFilter(filterName);\r\n    }\r\n\r\n    public Start2(identifier: string, ss: number, refDistance: number, volume: number, loop: boolean): void {\r\n        SendNuiMessage(JSON.stringify({\r\n            type: \"startSound\",\r\n            identifier: identifier,\r\n            startTime: ss,\r\n            refDistance,\r\n            volume,\r\n            loop\r\n        }));\r\n    }\r\n\r\n    public Move2(pos: number[]): void {\r\n        this.Move(pos[0], pos[1], pos[2]);\r\n    }\r\n\r\n    public Move(posX: number, posY: number, posZ: number): void {\r\n        this.options[\"posX\"] = posX;\r\n        this.options[\"posY\"] = posY;\r\n        this.options[\"posZ\"] = posZ;\r\n\r\n        let waterHeight = 0;\r\n        GetWaterHeightNoWaves(posX, posY, posZ, waterHeight);\r\n\r\n        SendNuiMessage(JSON.stringify({\r\n            type: \"moveSound\",\r\n            identifier: this.identifier,\r\n            posX,\r\n            posY,\r\n            posZ,\r\n        }));\r\n\r\n        if (posZ < waterHeight && !this.underwater) {\r\n            this.AddFilter(\"underwater\");\r\n            this.underwater = true;\r\n        } else if (posZ >= waterHeight && this.underwater) {\r\n            this.RemoveFilter(\"underwater\");\r\n            this.underwater = false;\r\n        }\r\n    }\r\n\r\n    public Rotate(rotX: number, rotY: number, rotZ: number): void {\r\n        this.options[\"rotX\"] = rotX;\r\n        this.options[\"rotY\"] = rotY;\r\n        this.options[\"rotZ\"] = rotZ;\r\n\r\n        SendNuiMessage(JSON.stringify({\r\n            type: \"rotateSound\",\r\n            identifier: this.identifier,\r\n            rotX,\r\n            rotY,\r\n            rotZ\r\n        }));\r\n    }\r\n\r\n    public Attach(netId: number): void {\r\n        this.options[\"attachTo\"] = netId;\r\n    }\r\n\r\n    public Detach(): void {\r\n        delete this.options[\"attachTo\"];\r\n    }\r\n\r\n    public Stop(identifier: string): void {\r\n        SendNuiMessage(JSON.stringify({\r\n            type: \"stopSound\",\r\n            identifier: identifier,\r\n        }));\r\n    }\r\n\r\n    public Dispose(identifier: string): void {\r\n        SendNuiMessage(JSON.stringify({\r\n            type: \"disposeSound\",\r\n            identifier: identifier,\r\n        }));\r\n        delete this.sounds[identifier];\r\n    }\r\n\r\n    public DeleteOnComplete(identifier: string): void {\r\n        if (this.sounds[identifier]) {\r\n            delete this.sounds[identifier];\r\n        }\r\n    }\r\n\r\n    public isAttached(): boolean {\r\n        return this.options.hasOwnProperty(\"attachTo\");\r\n    }\r\n\r\n    public GetAttachTo(): number {\r\n        return this.isAttached() ? this.options[\"attachTo\"] : 0;\r\n    }\r\n\r\n    public getPosition(): any {\r\n        const attachedNetId = this.GetAttachTo();\r\n\r\n        if (attachedNetId !== 0) {\r\n            return GetEntityCoords(NetworkGetEntityFromNetworkId(attachedNetId), false);\r\n        }\r\n\r\n        const posX = this.options[\"posX\"] || 0;\r\n        const posY = this.options[\"posY\"] || 0;\r\n        const posZ = this.options[\"posZ\"] || 0;\r\n\r\n        return Vector3(posX, posY, posZ);\r\n    }\r\n\r\n    public AddFilter(filterName: string): void {\r\n        SendNuiMessage(JSON.stringify({\r\n            type: \"addSoundFilter\",\r\n            identifier: this.identifier,\r\n            filterName\r\n        }));\r\n    }\r\n\r\n    public RemoveFilter(filterName: string): void {\r\n        SendNuiMessage(JSON.stringify({\r\n            type: \"removeSoundFilter\",\r\n            identifier: this.identifier,\r\n            filterName\r\n        }));\r\n    }\r\n}", "import { SounityClientAPI } from './SounityClientAPI';\r\nconst EVENT_PREFIX = \"Sounity\";\r\nconst EVENTS = [\r\n    { name: \"ServerTime\", handler: \"onServerTime\" },\r\n    { name: \"CreateSound\", handler: \"onCreateSound\" },\r\n    { name: \"StartSound\", handler: \"onPlaySound\" },\r\n    { name: \"StopSound\", handler: \"onStopSound\" },\r\n    { name: \"CreateSoundFilter\", handler: \"onCreateSoundFilter\" },\r\n    { name: \"MoveSound\", handler: \"onMoveSound\" },\r\n    { name: \"RotateSound\", handler: \"onRotateSound\" },\r\n    { name: \"AttachSound\", handler: \"onAttachSound\" },\r\n    { name: \"DetachSound\", handler: \"onDetachSound\" },\r\n    { name: \"DisposeSound\", handler: \"onDisposeSound\" },\r\n    { name: \"AddFilter\", handler: \"onAddFilter\" },\r\n    { name: \"AddFilters\", handler: \"onAddFilters\" },\r\n    { name: \"RemoveFilter\", handler: \"onRemoveFilter\" },\r\n    { name: \"AddListenerFilter\", handler: \"onAddListenerFilter\" },\r\n    { name: \"RemoveListenerFilter\", handler: \"onRemoveListenerFilter\" },\r\n    { name: \"DeleteOnComplete\", handler: \"onDeleteOnComplete\" },\r\n    { name: \"ChangeVolume\", handler: \"onChangeVolume\" },\r\n    { name: \"ChangeMaxDistance\", handler: \"onChangeMaxDistance\" },\r\n    { name: \"ChangeRefDistance\", handler: \"onChangeRefDistance\" },\r\n    { name: \"ChangeLoop\", handler: \"onChangeLoop\" },\r\n];\r\n\r\nexport class SounityClient {\r\n    protected sounityClientAPI: SounityClientAPI;\r\n    private tickInterval: number | null = null;\r\n    private activeSounds: Set<string> = new Set();\r\n\r\n    constructor() {\r\n        EVENTS.forEach(event => {\r\n            onNet(`${EVENT_PREFIX}:${event.name}`, (...args: any[]) => (this as any)[event.handler](...args));\r\n        });\r\n\r\n        this.sounityClientAPI = new SounityClientAPI();\r\n    }\r\n\r\n    private startTick(): void {\r\n        if (this.tickInterval === null) {\r\n            this.tickInterval = setTick(() => this.BrowserUpdaterTick());\r\n        }\r\n    }\r\n\r\n    private stopTick(): void {\r\n        if (this.tickInterval !== null) {\r\n            clearTick(this.tickInterval);\r\n            this.tickInterval = null;\r\n        }\r\n    }\r\n\r\n    private onCreateSound(identifier: string, source: string, json_options: string): void {\r\n        this.sounityClientAPI.CreateSound(source, json_options, identifier);\r\n    }\r\n\r\n    private onPlaySound(identifier: string, startTime: number, refDistance: number, volume: number, loop: boolean): void {\r\n        this.activeSounds.add(identifier);\r\n        this.startTick();\r\n        this.sounityClientAPI.StartSound(identifier, startTime, refDistance, volume, loop);\r\n    }\r\n\r\n    private onStopSound(identifier: string): void {\r\n        this.activeSounds.delete(identifier);\r\n        if (this.activeSounds.size === 0) {\r\n            this.stopTick();\r\n        }\r\n        this.sounityClientAPI.StopSound(identifier);\r\n    }\r\n\r\n    private onChangeVolume(identifier: string, volume: number): void {\r\n        SendNuiMessage(JSON.stringify({ type: \"setSoundVolume\", identifier, volume }));\r\n    }\r\n\r\n    private onChangeRefDistance(identifier: string, refDistance: number): void {\r\n        SendNuiMessage(JSON.stringify({ type: \"setSoundRefDistance\", identifier, refDistance }));\r\n    }\r\n\r\n    private onChangeLoop(identifier: string, loop: boolean): void {\r\n        SendNuiMessage(JSON.stringify({ type: \"setLoop\", identifier, loop }));\r\n    }\r\n\r\n    private onCreateSoundFilter(identifier: string, filterName: string, json_options: string): void {\r\n        this.sounityClientAPI.CreateFilter(identifier, filterName, json_options);\r\n    }\r\n\r\n    private onMoveSound(identifier: string, posX: number, posY: number, posZ: number): void {\r\n        this.sounityClientAPI.MoveSound(identifier, posX, posY, posZ);\r\n    }\r\n\r\n    private onRotateSound(identifier: string, rotX: number, rotY: number, rotZ: number): void {\r\n        this.sounityClientAPI.RotateSound(identifier, rotX, rotY, rotZ);\r\n    }\r\n\r\n    private onAttachSound(identifier: string, netId: number): void {\r\n        this.sounityClientAPI.AttachSound(identifier, netId);\r\n    }\r\n\r\n    private onDetachSound(identifier: string): void {\r\n        this.sounityClientAPI.DetachSound(identifier);\r\n    }\r\n\r\n    private onDeleteOnComplete(identifier: string): void {\r\n        this.sounityClientAPI.DeleteOnComplete(identifier);\r\n    }\r\n\r\n    private onDisposeSound(identifier: string): void {\r\n        this.activeSounds.delete(identifier);\r\n        if (this.activeSounds.size === 0) {\r\n            this.stopTick();\r\n        }\r\n        this.sounityClientAPI.DisposeSound(identifier);\r\n    }\r\n\r\n    private onServerTime(serverTime: number): void {\r\n        this.sounityClientAPI.setServerTime(serverTime);\r\n    }\r\n\r\n    private onAddFilter(identifier: string, filterName: string): void {\r\n        this.sounityClientAPI.AddSoundFilter(identifier, filterName);\r\n    }\r\n\r\n    private onAddFilters(identifier: string, filterNames_json: string): void {\r\n        const filterNames: string[] = JSON.parse(filterNames_json);\r\n        filterNames.forEach(filterName => this.onAddFilter(identifier, filterName));\r\n    }\r\n\r\n    private onRemoveFilter(identifier: string, filterName: string): void {\r\n        this.sounityClientAPI.RemoveSoundFilter(identifier, filterName);\r\n    }\r\n\r\n    private onAddListenerFilter(filterName: string): void {\r\n        this.sounityClientAPI.AddListenerFilter(filterName);\r\n    }\r\n\r\n    private onRemoveListenerFilter(filterName: string): void {\r\n        this.sounityClientAPI.RemoveListenerFilter(filterName);\r\n    }\r\n\r\n    private async BrowserUpdaterTick(): Promise<void> {\r\n        this.sounityClientAPI.Tick();\r\n    }\r\n}", "import \"./cl_nuicallbacks\";\r\nimport { SounityClient } from \"./classes/SounityClient\";\r\n\r\nexport const Config = JSON.parse(LoadResourceFile(GetCurrentResourceName(), \"config.json\"));\r\nsetImmediate(() => {\r\n    new SounityClient();\r\n});"],
  "mappings": "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",
  "names": ["NUI_CALLBACK_TYPES", "data", "cb", "Config", "Vector3", "x", "y", "z", "__name", "_SounityClientAPI", "__publicField", "serverTime", "Position", "Rotation", "sound", "netId", "entId", "position", "rotation", "filterName", "filterType", "options_json", "identifier", "source", "identifierX", "options", "soundInstance", "ss", "refDistance", "volume", "loop", "posX", "posY", "posZ", "rotX", "rotY", "rotZ", "initialPosition", "waterHeight", "startTime", "entityId", "pos", "attachedNetId", "SounityClientAPI", "EVENT_PREFIX", "EVENTS", "_SounityClient", "__publicField", "event", "args", "SounityClientAPI", "identifier", "source", "json_options", "startTime", "refDistance", "volume", "loop", "filterName", "posX", "posY", "posZ", "rotX", "rotY", "rotZ", "netId", "serverTime", "filterNames_json", "__name", "SounityClient", "Config", "SounityClient"]
}
