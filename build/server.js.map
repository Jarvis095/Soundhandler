{
  "version": 3,
  "sources": ["../resources/game/server/classes/SounitySound.ts", "../resources/game/shared/utils.ts", "../resources/game/server/classes/SounityServerAPI.ts", "../resources/game/server/classes/SounityServer.ts", "../resources/game/server/sv_main.ts"],
  "sourcesContent": ["export function Vector3(x: number, y: number, z: number) {\r\n    return [x, y, z];\r\n}\r\n\r\nexport class SounitySound {\r\n    public identifier: string;\r\n    private options: Record<string, any>;\r\n    private isPlaying: boolean = false;\r\n    private startTime: number = 0;\r\n    private source: string = \"\";\r\n    public playersInRange: any[] = [];\r\n    private activeFilters: string[] = [];\r\n    private resDistance: number = 3;\r\n    private volume: number = 1;\r\n    private loop: boolean = false;\r\n\r\n    constructor(identifier: string, source: string, options: Record<string, any> = {}) {\r\n        this.identifier = identifier;\r\n        this.source = source;\r\n        this.options = options;\r\n\r\n        this.NotifyPlayers(\"CreateSound\", identifier, source, this.getOptionJSON());\r\n    }\r\n\r\n    private NotifyPlayers(EventName: string, ...args: any[]): void {\r\n        for (const player of this.playersInRange) {\r\n            TriggerClientEvent(`Sounity:${EventName}`, player, this.identifier, ...args)\r\n        }\r\n    }\r\n\r\n    public Attach(netId: number): void {\r\n        this.options[\"attachTo\"] = netId;\r\n        this.NotifyPlayers(\"AttachSound\", netId);\r\n    }\r\n\r\n    public ChangeVolume(volume: number): void {\r\n        this.volume = volume;\r\n        this.NotifyPlayers(\"ChangeVolume\", volume);\r\n    }\r\n\r\n    public ChangeRefDistance(refDistance: number): void {\r\n        this.resDistance = refDistance;\r\n        this.NotifyPlayers(\"ChangeRefDistance\", refDistance);\r\n    }\r\n\r\n    public ChangeLoop(loop: boolean): void {\r\n        this.loop = loop;\r\n        this.NotifyPlayers(\"ChangeLoop\", loop);\r\n    }\r\n\r\n    public Detach(): void {\r\n        delete this.options[\"attachTo\"];\r\n        this.NotifyPlayers(\"DetachSound\");\r\n    }\r\n\r\n    public Start(): void {\r\n        this.startTime = GetGameTimer();\r\n        this.isPlaying = true;\r\n        this.NotifyPlayers(\"StartSound\", this.startTime, this.resDistance, this.volume, this.loop);\r\n    }\r\n\r\n    public Move(posX: number, posY: number, posZ: number): void {\r\n        this.options[\"posX\"] = posX;\r\n        this.options[\"posY\"] = posY;\r\n        this.options[\"posZ\"] = posZ;\r\n\r\n        this.Detach();\r\n        this.NotifyPlayers(\"MoveSound\", posX, posY, posZ);\r\n    }\r\n\r\n    public Rotate(rotX: number, rotY: number, rotZ: number): void {\r\n        this.options[\"rotX\"] = rotX;\r\n        this.options[\"rotY\"] = rotY;\r\n        this.options[\"rotZ\"] = rotZ;\r\n\r\n        this.Detach();\r\n        this.NotifyPlayers(\"RotateSound\", rotX, rotY, rotZ);\r\n    }\r\n\r\n    public Dispose(): void {\r\n        this.NotifyPlayers(\"DisposeSound\");\r\n    }\r\n\r\n    public Stop(): void {\r\n        this.isPlaying = false;\r\n        this.NotifyPlayers(\"StopSound\");\r\n    }\r\n\r\n    private getOptionJSON(): string {\r\n        return JSON.stringify(this.options);\r\n    }\r\n\r\n    public PlayerInRange(player: any): void {\r\n        this.playersInRange.push(player);\r\n\r\n        TriggerClientEvent(\"Sounity:CreateSound\", player, this.identifier, this.source, this.getOptionJSON());\r\n\r\n        if (this.activeFilters.length > 0) {\r\n            TriggerClientEvent(\"Sounity:AddFilters\", player, this.identifier, JSON.stringify(this.activeFilters));\r\n        }\r\n\r\n        if (this.isPlaying) {\r\n            TriggerClientEvent(\"Sounity:StartSound\", player, this.identifier, this.startTime, this.resDistance, this.volume, this.loop);\r\n        }\r\n    }\r\n\r\n    public PlayerOutOfRange(player: any): void {\r\n        this.playersInRange = this.playersInRange.filter(p => p !== player);\r\n        TriggerClientEvent(\"Sounity:DisposeSound\", player, this.identifier);\r\n    }\r\n\r\n    public isAttached(): boolean {\r\n        return this.options.hasOwnProperty(\"attachTo\");\r\n    }\r\n\r\n    public GetAttachTo(): number {\r\n        if (!this.isAttached()) return 0;\r\n        return this.options[\"attachTo\"];\r\n    }\r\n\r\n    public getPosition() {\r\n        const attachedNetId = this.GetAttachTo();\r\n\r\n        if (attachedNetId !== 0) {\r\n            return GetEntityCoords(NetworkGetEntityFromNetworkId(attachedNetId));\r\n        }\r\n\r\n        const posX = this.options[\"posX\"] || 0;\r\n        const posY = this.options[\"posY\"] || 0;\r\n        const posZ = this.options[\"posZ\"] || 0;\r\n\r\n        return Vector3(posX, posY, posZ);\r\n    }\r\n\r\n    public getIdentifer(): string {\r\n        return this.identifier;\r\n    }\r\n\r\n    public AddFilter(filterName: string): void {\r\n        if (this.activeFilters.includes(filterName)) {\r\n            throw new Error(`A filter with the name '${filterName}' is already active in this sound instance!`);\r\n        }\r\n\r\n        this.activeFilters.push(filterName);\r\n        this.NotifyPlayers(\"AddFilter\", filterName);\r\n    }\r\n\r\n    public RemoveFilter(filterName: string): void {\r\n        if (!this.activeFilters.includes(filterName)) {\r\n            throw new Error(`A filter with the name '${filterName}' is not active in this sound instance!`);\r\n        }\r\n\r\n        this.activeFilters = this.activeFilters.filter(f => f !== filterName);\r\n        this.NotifyPlayers(\"RemoveFilter\", filterName);\r\n    }\r\n}", "export function Delay(ms: number) {\r\n    return new Promise(res => setTimeout(res, ms));\r\n};\r\n\r\nexport const distanceBetween = (pos1: number[], pos2: number[]) => {\r\n    return Math.hypot(pos1[0] - pos2[0], pos1[1] - pos2[1], pos1[2] - pos2[2])\r\n};\r\n\r\nexport const generateUUid = () => {\r\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\r\n        var r = Math.random() * 16 | 0, v = c == \"x\" ? r : r & 0x3 | 0x8;\r\n        return v.toString(16);\r\n    });\r\n};\r\n\r\nexport const LOGGER = (message: string) => {\r\n    return console.log(`\\x1b[1m\\x1b[47m\\x1b[34m[Summit_Phone] \\x1b[4m\\x1b[31m${message}\\x1b[0m`)\r\n}", "\r\nimport { Config } from '@server/sv_main';\r\nimport { SounitySound } from './SounitySound';\r\nimport { distanceBetween } from '@shared/utils';\r\n\r\nexport class SounityServerAPI {\r\n    private MAX_RANGE = new Map<string, number>();\r\n    protected static idCounter: number = 1;\r\n    protected identifierPrefix: string = 'server';\r\n    protected sounds: Record<string, any> = {};\r\n\r\n    constructor() {\r\n        exports('AddListenerFilter', this.AddListenerFilter.bind(this));\r\n        exports('RemoveListenerFilter', this.RemoveListenerFilter.bind(this));\r\n        exports('CreateSound', this.CreateSound.bind(this));\r\n        exports('StartSound', this.StartSound.bind(this));\r\n        exports('MoveSound', this.MoveSound.bind(this));\r\n        exports('RotateSound', this.RotateSound.bind(this));\r\n        exports('StopSound', this.StopSound.bind(this));\r\n        exports('DisposeSound', this.DisposeSound.bind(this));\r\n        exports('AttachSound', this.AttachSound.bind(this));\r\n        exports('DetachSound', this.DetachSound.bind(this));\r\n        exports('AddSoundFilter', this.AddSoundFilter.bind(this));\r\n        exports('RemoveSoundFilter', this.RemoveSoundFilter.bind(this));\r\n        exports('ChangeVolume', this.ChangeVolume.bind(this));\r\n        exports('ChangeRefDistance', this.ChangeRefDistance.bind(this));\r\n        exports('ChangeLoop', this.ChangeLoop.bind(this));\r\n    }\r\n\r\n    public AddListenerFilter(playerId: number, filterName: string): void {\r\n        TriggerClientEvent(\"Sounity:AddListenerFilter\", playerId, filterName);\r\n    }\r\n\r\n    public RemoveListenerFilter(playerId: number, filterName: string): void {\r\n        TriggerClientEvent(\"Sounity:RemoveListenerFilter\", playerId, filterName);\r\n    }\r\n\r\n    public Tick(): void {\r\n        for (const sound of Object.values(this.sounds)) {\r\n            for (const player of getPlayers()) {\r\n                const ped = GetPlayerPed(player);\r\n\r\n                if (ped === 0) continue;\r\n\r\n                const distance = distanceBetween(GetEntityCoords(ped), sound.getPosition());\r\n                if (distance <= (this.MAX_RANGE.get(sound.identifier) || 10) && !sound.playersInRange.includes(player)) {\r\n                    sound.PlayerInRange(player);\r\n                } else if (distance > (this.MAX_RANGE.get(sound.identifier) || 10) && sound.playersInRange.includes(player)) {\r\n                    sound.PlayerOutOfRange(player);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected getSoundInstance(identifier: string) {\r\n        if (!this.sounds[identifier]) {\r\n            throw new Error(`Unknown identifier '${identifier}'`);\r\n        }\r\n\r\n        return this.sounds[identifier];\r\n    }\r\n\r\n    public CreateSound(source: string, options_json: string = \"{}\"): string {\r\n        const options = JSON.parse(options_json);\r\n        const identifier = `${this.identifierPrefix}${SounityServerAPI.idCounter++}`;\r\n        const sound = new SounitySound(identifier, source, options);\r\n        this.MAX_RANGE.set(identifier, options.maxRange || 10);\r\n        this.sounds[identifier] = sound;\r\n\r\n        return identifier;\r\n    }\r\n\r\n    public StartSound(identifier: string): void {\r\n        this.getSoundInstance(identifier).Start();\r\n    }\r\n\r\n    public ChangeVolume(identifier: string, volume: number): void {\r\n        this.getSoundInstance(identifier).ChangeVolume(volume);\r\n    }\r\n\r\n    public ChangeRefDistance(identifier: string, refDistance: number): void {\r\n        this.getSoundInstance(identifier).ChangeRefDistance(refDistance);\r\n    }\r\n\r\n    public ChangeLoop(identifier: string, loop: boolean): void {\r\n        this.getSoundInstance(identifier).ChangeLoop(loop);\r\n    }\r\n\r\n    public MoveSound(identifier: string, posX: number, posY: number, posZ: number): void {\r\n        this.getSoundInstance(identifier).Move(posX, posY, posZ);\r\n    }\r\n\r\n    public RotateSound(identifier: string, rotX: number, rotY: number, rotZ: number): void {\r\n        this.getSoundInstance(identifier).Rotate(rotX, rotY, rotZ);\r\n    }\r\n\r\n    public StopSound(identifier: string): void {\r\n        this.getSoundInstance(identifier).Stop();\r\n    }\r\n\r\n    public DisposeSound(identifier: string): void {\r\n        if (this.sounds[identifier]) {\r\n            this.getSoundInstance(identifier).Dispose();\r\n            delete this.sounds[identifier];\r\n        }\r\n    }\r\n\r\n    public AttachSound(identifier: string, entityId: number): void {\r\n        this.getSoundInstance(identifier).Attach(entityId);\r\n    }\r\n\r\n    public DetachSound(identifier: string): void {\r\n        this.getSoundInstance(identifier).Detach();\r\n    }\r\n\r\n    public AddSoundFilter(identifier: string, filterName: string): void {\r\n        this.getSoundInstance(identifier).AddFilter(filterName);\r\n    }\r\n\r\n    public RemoveSoundFilter(identifier: string, filterName: string): void {\r\n        this.getSoundInstance(identifier).RemoveFilter(filterName);\r\n    }\r\n}", "import { SounityServerAPI } from './SounityServerAPI';\r\n\r\nexport class SounityServer {\r\n    private sounityServerAPI: SounityServerAPI;\r\n    private debug: number = -1;\r\n    public tick = 0;\r\n\r\n    constructor() {\r\n        this.sounityServerAPI = new SounityServerAPI();\r\n        this.tick = setTick(() => this.OnTick());\r\n    }\r\n\r\n    private async OnTick(): Promise<void> {\r\n        this.sounityServerAPI.Tick();\r\n        TriggerClientEvent(\"Sounity:ServerTime\", -1, GetGameTimer());\r\n    }\r\n}", "import { SounityServer } from \"./classes/SounityServer\";\r\n\r\nexport const Config = JSON.parse(LoadResourceFile(GetCurrentResourceName(), \"config.json\"));\r\n\r\nsetImmediate(() => {\r\n    new SounityServer();\r\n});"],
  "mappings": "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",
  "names": ["Vector3", "x", "y", "z", "__name", "_SounitySound", "identifier", "source", "options", "EventName", "args", "player", "netId", "volume", "refDistance", "loop", "posX", "posY", "posZ", "rotX", "rotY", "rotZ", "p", "attachedNetId", "filterName", "f", "SounitySound", "distanceBetween", "__name", "pos1", "pos2", "_SounityServerAPI", "playerId", "filterName", "sound", "player", "ped", "distance", "distanceBetween", "identifier", "source", "options_json", "options", "SounitySound", "volume", "refDistance", "loop", "posX", "posY", "posZ", "rotX", "rotY", "rotZ", "entityId", "__name", "__publicField", "SounityServerAPI", "_SounityServer", "SounityServerAPI", "__name", "SounityServer", "Config", "SounityServer"]
}
